// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/intent/intent.proto

package intent

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	IntentAnalyzer_AnalyzeIntent_FullMethodName = "/intent.IntentAnalyzer/AnalyzeIntent"
	IntentAnalyzer_HealthCheck_FullMethodName   = "/intent.IntentAnalyzer/HealthCheck"
)

// IntentAnalyzerClient is the client API for IntentAnalyzer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 의도분석기 서비스 정의
type IntentAnalyzerClient interface {
	// 핵심 의도 분석
	AnalyzeIntent(ctx context.Context, in *IntentRequest, opts ...grpc.CallOption) (*IntentResponse, error)
	// 헬스체크
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type intentAnalyzerClient struct {
	cc grpc.ClientConnInterface
}

func NewIntentAnalyzerClient(cc grpc.ClientConnInterface) IntentAnalyzerClient {
	return &intentAnalyzerClient{cc}
}

func (c *intentAnalyzerClient) AnalyzeIntent(ctx context.Context, in *IntentRequest, opts ...grpc.CallOption) (*IntentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IntentResponse)
	err := c.cc.Invoke(ctx, IntentAnalyzer_AnalyzeIntent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *intentAnalyzerClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, IntentAnalyzer_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IntentAnalyzerServer is the server API for IntentAnalyzer service.
// All implementations must embed UnimplementedIntentAnalyzerServer
// for forward compatibility.
//
// 의도분석기 서비스 정의
type IntentAnalyzerServer interface {
	// 핵심 의도 분석
	AnalyzeIntent(context.Context, *IntentRequest) (*IntentResponse, error)
	// 헬스체크
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	mustEmbedUnimplementedIntentAnalyzerServer()
}

// UnimplementedIntentAnalyzerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIntentAnalyzerServer struct{}

func (UnimplementedIntentAnalyzerServer) AnalyzeIntent(context.Context, *IntentRequest) (*IntentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnalyzeIntent not implemented")
}
func (UnimplementedIntentAnalyzerServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedIntentAnalyzerServer) mustEmbedUnimplementedIntentAnalyzerServer() {}
func (UnimplementedIntentAnalyzerServer) testEmbeddedByValue()                        {}

// UnsafeIntentAnalyzerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IntentAnalyzerServer will
// result in compilation errors.
type UnsafeIntentAnalyzerServer interface {
	mustEmbedUnimplementedIntentAnalyzerServer()
}

func RegisterIntentAnalyzerServer(s grpc.ServiceRegistrar, srv IntentAnalyzerServer) {
	// If the following call pancis, it indicates UnimplementedIntentAnalyzerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&IntentAnalyzer_ServiceDesc, srv)
}

func _IntentAnalyzer_AnalyzeIntent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntentAnalyzerServer).AnalyzeIntent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntentAnalyzer_AnalyzeIntent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntentAnalyzerServer).AnalyzeIntent(ctx, req.(*IntentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntentAnalyzer_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntentAnalyzerServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IntentAnalyzer_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntentAnalyzerServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IntentAnalyzer_ServiceDesc is the grpc.ServiceDesc for IntentAnalyzer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IntentAnalyzer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "intent.IntentAnalyzer",
	HandlerType: (*IntentAnalyzerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AnalyzeIntent",
			Handler:    _IntentAnalyzer_AnalyzeIntent_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _IntentAnalyzer_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/intent/intent.proto",
}
