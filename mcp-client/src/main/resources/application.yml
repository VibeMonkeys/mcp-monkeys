server:
  port: 8090

spring:
  application:
    name: unified-mcp-client
  ai:
    # Vertex AI는 Google Cloud 인증을 사용하므로 별도 API 키가 필요 없습니다.
    vertex:
      ai:
        gemini:
          project-id: {실제 프로젝트 id}
          location: ${GOOGLE_CLOUD_LOCATION:asia-northeast1} # 도쿄가 한국에서는 빠름
          chat:
            options:
              model: gemini-1.5-flash
              temperature: 0.7
    mcp:
      client:
        enabled: true
        type: SYNC
        request-timeout: 30s
        toolcallback:
          enabled: true
        sse:
          transport-mode: WEBFLUX
          connections:
            weather:
              url: http://localhost:8092
              name: weather-mcp-server
            news:
              url: http://localhost:8093
              name: news-mcp-server
            translate:
              url: http://localhost:8094
              name: translate-mcp-server
            calendar:
              url: http://localhost:8095
              name: calendar-mcp-server
  datasource:
    url: jdbc:h2:mem:testdb
    driverClassName: org.h2.Driver
    username: sa
    password: password
  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
    hibernate:
      ddl-auto: create-drop
    show-sql: true
  h2:
    console:
      enabled: true

# API Settings - Configure these environment variables
api:
  github:
    token: ${GITHUB_TOKEN:dummy-token}
  jira:
    url: ${JIRA_URL:https://your-domain.atlassian.net}
    email: ${JIRA_EMAIL:dummy@email.com}
    token: ${JIRA_TOKEN:dummy-token}
  gmail:
    client-id: ${GMAIL_CLIENT_ID:dummy-client-id}
    client-secret: ${GMAIL_CLIENT_SECRET:dummy-client-secret}
    refresh-token: ${GMAIL_REFRESH_TOKEN:dummy-refresh-token}
  slack:
    bot-token: ${SLACK_BOT_TOKEN:xoxb-dummy-token}
    
mcp:
  weather:
    url: ${MCP_WEATHER_URL:http://localhost:8092}
  news:
    url: ${MCP_NEWS_URL:http://localhost:8093}
  translate:
    url: ${MCP_TRANSLATE_URL:http://localhost:8094}
  calendar:
    url: ${MCP_CALENDAR_URL:http://localhost:8095}

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,env
  endpoint:
    health:
      show-details: always
    metrics:
      enabled: true
    prometheus:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true
    distribution:
      percentiles-histogram:
        http.server.requests: true
        mcp.chat.duration: true
  tracing:
    sampling:
      probability: 1.0

logging:
  level:
    com.monkeys.client: DEBUG
    org.springframework.ai: DEBUG
    org.springframework.ai.mcp: DEBUG